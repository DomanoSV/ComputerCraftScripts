-- ElectronusBIOS v2.0 -- 
-- Developed by DomanoSV and Spook811 --
-- Copyright DKE Domain 2014 - 2015 --

-- Local Variables --
local x,y = term.getSize()

-- Local Functions --
local function drawLogo()
	local logo1 = { "_____", "/ ___/", "/ /", "/ __/", "/ /", "/_____/" }
	local logo2 = { "__", "_/", "/", "_/   ", "/", "_/   " }
	local logo3 = { "", "", "", "", "__", "" } 
	local logo4 = { "", "", "__   ", "", "__   ", "" } 
	local logostr1 = "Electronus "
	local logostr2 = "BIOSv2.0  "
	local logoHeight = table.getn(logo1)
	if term.isColor() then
		for i=1,logoHeight do
			local w = (string.len(logo1[i]) + string.len(logo2[i]) + string.len(logo3[i]) + string.len(logo4[i]))
			term.setCursorPos((x-w), i)
			term.setTextColor(colors.lime)
			write(logo1[i])
			term.setTextColor(colors.lightBlue)
			write(logo2[i])
			term.setTextColor(colors.lime)
			write(logo3[i])
			term.setTextColor(colors.lightBlue)
			write(logo4[i])
		end
		term.setCursorPos((x - string.len(logostr1)), (logoHeight + 1))
		term.setTextColor(colors.yellow)
		write(logostr1)
		term.setCursorPos((x - string.len(logostr2)), (logoHeight + 2))
		term.setTextColor(colors.white)
		write(logostr2)
	else
		term.setTextColor(colors.white)
	    for i=1,logoHeight do
			local w = (string.len(logo1[i]) + string.len(logo2[i]) + string.len(logo3[i]) + string.len(logo4[i]))
			term.setCursorPos((x-w), i)
			write(logo1[i]..logo2[i]..logo3[i]..logo4[i])
		end
		term.setCursorPos((x - string.len(logostr1)), (logoHeight + 1))
		write(logostr1)
		term.setCursorPos((x - string.len(logostr2)), (logoHeight + 2))
		write(logostr2)
	end
end

-- Program --
term.clear()
term.setCursorPos(1,1)
term.setBackgroundColor(colors.black)
drawLogo()
term.setTextColor(colors.white)
term.setCursorPos(1,1)
term.write("ElectronusBIOS v2.0 Release 1.0")
term.setCursorPos(1,2)
term.write("Copyright 2014-2015 DKE Domain")
sleep(1)
term.setCursorPos(1,4)
term.write("BlazeCore Processor 3.4GHz")
sleep(1)
term.setCursorPos(1,5)
term.write("4096MB System RAM")
term.setCursorPos(19,5)
textutils.slowPrint("...", 50)
term.setCursorPos(23,5)
term.write("Passed")
term.setCursorPos(1, 7)
term.write("Physical Drives")
term.setCursorPos(1,8)
term.write("---------------")

local sidesList = { "left", "right", "top", "bottom", "front", "back"}
local driveCount = 1
local modemExists = false
local modemSide = "right"
local bootDrive = "right"
local bootDriveExists = false
local mountName = disk
noDiskBoot = false
systemOS = "/boot/boot"
runShell = "/boot/boot"

for i = 1,6 do
 sleep(0.1)
 if peripheral.isPresent(sidesList[i]) then
  if peripheral.getType(sidesList[i]) == "modem" then
   modemExists = true
   modemSide = sidesList[i]
  elseif  peripheral.getType(sidesList[i]) == "drive" then
   mountName = "[EMPTY]"
   if disk.isPresent(sidesList[i]) then
    mountName = disk.getMountPath(sidesList[i])
   end
   if driveCount > 1 then
    term.setCursorPos(1,(6+driveCount))
    term.write("Disk Drive: "..mountName.." - Connected ("..sidesList[i]..")")
   else 
    term.setCursorPos(1,(8+driveCount))
    term.write("Bootable Disk Drive: "..mountName.." - Connected ("..sidesList[i]..")")
    bootDrive = sidesList[i]
    bootDriveExists = true
   end
   driveCount = driveCount + 1
  end
 end
end

sleep(0.2)
if modemExists then
 term.setCursorPos(1,17)
 clientId = os.computerID()
 print("Modem connected ("..modemSide.."). IP: ", clientId)
else
 term.setCursorPos(1,17)
 print("Warning! No modem connected.")
end
sleep(0.1)
term.setCursorPos(1,18)
print("Booting [                                        ]")
sleep(0.1)
term.setCursorPos(1,18)
print("Booting [###############################         ]")
sleep(0.2)
term.setCursorPos(1,18)
print("Booting [########################################]")
sleep(0.1)

term.clear()
term.setCursorPos(1,1)

if bootDriveExists and disk.isPresent(bootDrive) then
	mountName = disk.getMountPath(bootDrive).."/autoexec"
	if fs.exists(mountName) then
		shell.run(runShell, modemSide, mountName)
	else
		shell.run(runShell, modemSide)
	end

else
	shell.run(runShell, modemSide)
end
