-- Boot Loader v1.0 Beta -- 
-- Developed by DomanoSV and Spook811 --
-- Copyright DKE Domain 2014 - 2015 --

-- Local Variables --
tArgs = {...}
local bootOpt = { }
local x,y = term.getSize()
local labLen = 15
local slc = 1

-- Load in API --
os.loadAPI("/lib/libcore")

-- Local Functions --
local function readBootOptions()
 if not fs.exists("/boot/initrd") then return end
 local file = io.open("/boot/initrd", "r")
 c = 0
 for line in file:lines()do
  c = c + 1
  local t = libcore.split(line, ";")
  table.insert(bootOpt, { 
	name = t[1],
	dir = t[2],
	args = t[3] })
  if c == 8 then break end  
 end
 file:close()
end

-- Program --
readBootOptions()

-- draw GUI Interface --
local bootOptLen = table.getn(bootOpt)
while true do
	term.setBackgroundColor(colors.black)
	term.clear()
	term.setCursorPos(1,1)
	term.setBackgroundColor(colors.white)
	term.setTextColor(colors.black)
	term.write(string.rep(" ", x))
	libcore.centerText("Boot Manager", 1)
	term.setCursorPos(3,3)
	term.setBackgroundColor(colors.black)
	term.setTextColor(colors.white)
	write("Please select the operating system to start:")
	for i=1,bootOptLen do
		local str = "Option"
		local nameLen = string.len(bootOpt[i].name)
		local addspaces = labLen - tonumber(nameLen)
		if addspaces >= 0 then
			str = i.." "..bootOpt[i].name
			str = str..string.rep(" ", addspaces)
		else
			str = string.sub(bootOpt[i].name, 1, labLen)
		end
		if i == slc then
			term.setBackgroundColor(colors.white)
			term.setTextColor(colors.black)
			term.setCursorPos(5,(i+4))
			write(str)
		else 
			term.setBackgroundColor(colors.black)
			term.setTextColor(colors.white)
			term.setCursorPos(5,(i+4))
			write(str)
		end
	end
	term.setBackgroundColor(colors.black)
	term.setTextColor(colors.white)
	term.setCursorPos(3, (bootOptLen + 6))
	write("Use the UP and DOWN arrow keys to select your")
	term.setCursorPos(3, (bootOptLen + 7))
	write("boot option. Press ENTER to Choose.")
	term.setCursorPos(3, (y-2))
	write("Press F5 to reboot or DEL to shutdown system.")
	term.setCursorPos(3, (y-1))
	local event, p1, p2 = os.pullEvent()
	if event == "key" then 
		if p1 == keys.up and slc > 1 then slc=slc-1
		elseif p1 == keys.down and slc < bootOptLen then slc=slc+1
		elseif p1 == keys.enter then
			local args = { }
			bootOptcmd = bootOpt[slc].dir
			if bootOpt[slc].args ~= null then
				args = libcore.split(bootOpt[slc].args, ",")
				for a=1,table.getn(args) do
					bootOptcmd = bootOptcmd.." "..args[a]
				end
			end	
			shell.run(bootOptcmd)
			sleep(1)
		elseif p1 == keys.f5 then
		    os.reboot()
		elseif p1 == keys.delete then
		    os.shutdown()
		end
	end
end